# Default values for preparr
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# Global settings
global:
  # Namespace to deploy into
  namespace: preparr

# PrepArr sidecar configuration
preparr:
  image:
    repository: ghcr.io/robbeverhelst/preparr
    pullPolicy: IfNotPresent
    tag: "latest"

  # Health check configuration
  health:
    port: 9001

  # Logging configuration
  logLevel: info  # debug|info|warn|error

# PostgreSQL configuration
postgresql:
  enabled: true
  image:
    repository: postgres
    tag: "16-alpine"
    pullPolicy: IfNotPresent
    pullSecrets: []

  # PostgreSQL credentials
  auth:
    username: postgres
    password: postgres123
    database: servarr
    existingSecret: ""
    secretKeys:
      adminPasswordKey: "password"

  service:
    type: ClusterIP
    port: 5432
    annotations: {}
    labels: {}

  # Security contexts
  podSecurityContext: {}
  securityContext: {}

  # Scheduling
  nodeSelector: {}
  tolerations: []
  affinity: {}

  # Resource limits
  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Persistence configuration
  persistence:
    enabled: false
    size: 8Gi
    storageClass: ""

# qBittorrent configuration
qbittorrent:
  enabled: true
  image:
    repository: linuxserver/qbittorrent
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1
  strategy: {}

  auth:
    username: admin
    password: adminpass
    existingSecret: ""
    secretKeys:
      usernameKey: "username"
      passwordKey: "password"

  service:
    type: NodePort
    webui:
      port: 8080
      nodePort: 30080
    bittorrent:
      port: 6881
      nodePort: 30881
    annotations: {}
    labels: {}
    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    externalTrafficPolicy: ""

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: qbittorrent.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []

  env:
    TZ: UTC
    PUID: "1000"
    PGID: "1000"

  extraEnv: []
  envFrom: []

  podSecurityContext: {}
  securityContext: {}
  podAnnotations: {}
  podLabels: {}

  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []

  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}
  lifecycle: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: ""

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "1Gi"
      cpu: "1000m"

  # Configuration as code
  config: {}
  # Example:
  # config:
  #   webUI:
  #     username: admin
  #     password: newpass

# Prowlarr configuration
prowlarr:
  enabled: true
  image:
    repository: linuxserver/prowlarr
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1
  strategy: {}

  apiKey: "c04914c6bfad445a3edc23e5edbca4d1"
  adminPassword: adminpass

  auth:
    existingSecret: ""
    secretKeys:
      adminPasswordKey: "admin-password"
      apiKeyKey: "api-key"

  service:
    type: NodePort
    webui:
      port: 9696
      nodePort: 30696
    health:
      port: 9001
      nodePort: 31003
    annotations: {}
    labels: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: prowlarr.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []

  env:
    TZ: UTC
    PUID: "1000"
    PGID: "1000"

  extraEnv: []
  envFrom: []

  podSecurityContext: {}
  securityContext: {}
  podAnnotations: {}
  podLabels: {}

  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []

  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}
  lifecycle: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: ""

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Reconciliation settings
  reconciliation:
    enabled: true
    interval: 30  # seconds
    watch: true

  # Configuration as code
  config:
    apiKey: "c04914c6bfad445a3edc23e5edbca4d1"
    applications:
      - name: "Sonarr"
        prowlarrUrl: "http://prowlarr:9696"
        baseUrl: "http://sonarr:8989"
        apiKey: "2bac5d00dca43258313c734821a15c4c"
        syncLevel: "fullSync"
      - name: "Radarr"
        prowlarrUrl: "http://prowlarr:9696"
        baseUrl: "http://radarr:7878"
        apiKey: "4fac7d10eca54269424d835a2edc15d2"
        syncLevel: "fullSync"
    indexers:
      - name: "1337x"
        enable: true
        priority: 25

# Sonarr configuration
sonarr:
  enabled: true
  image:
    repository: linuxserver/sonarr
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []

  apiKey: "2bac5d00dca43258313c734821a15c4c"
  adminPassword: adminpass

  # Secret management
  auth:
    existingSecret: ""
    secretKeys:
      adminPasswordKey: "admin-password"
      apiKeyKey: "api-key"

  # Deployment configuration
  replicaCount: 1
  strategy: {}

  # Security contexts
  podSecurityContext: {}
  securityContext: {}

  # Pod customization
  podAnnotations: {}
  podLabels: {}

  # Additional containers and volumes
  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []

  # Environment variables
  extraEnv: []
  envFrom: []

  # Custom probes
  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}

  # Lifecycle hooks
  lifecycle: {}

  # Scheduling
  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: ""

  # Ingress
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: sonarr.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []

  service:
    type: NodePort
    webui:
      port: 8989
      nodePort: 30989
    health:
      port: 9001
      nodePort: 31001

  env:
    TZ: UTC
    PUID: "1000"
    PGID: "1000"

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Reconciliation settings
  reconciliation:
    enabled: true
    interval: 30  # seconds
    watch: true

  # Storage configuration
  storage:
    tv:
      enabled: true
      size: 50Gi
      storageClass: ""

  # Configuration as code
  config:
    apiKey: "2bac5d00dca43258313c734821a15c4c"
    prowlarrSync: true
    rootFolders:
      - path: "/tv"
        accessible: true
    qualityProfiles:
      - name: "HD - 1080p"
        upgradeAllowed: true
        cutoff: 1080
        items:
          - quality:
              id: 1
              name: "HDTV-1080p"
            allowed: true
          - quality:
              id: 2
              name: "WEBDL-1080p"
            allowed: true
    downloadClients:
      - name: "qBittorrent"
        implementation: "QBittorrent"
        implementationName: "qBittorrent"
        configContract: "QBittorrentSettings"
        fields:
          - name: "host"
            value: "qbittorrent"
          - name: "port"
            value: 8080
          - name: "username"
            value: "admin"
          - name: "password"
            value: "adminpass"
          - name: "category"
            value: "tv"
        enable: true
        priority: 1

# Radarr configuration
radarr:
  enabled: true
  image:
    repository: linuxserver/radarr
    tag: latest
    pullPolicy: IfNotPresent
    pullSecrets: []

  replicaCount: 1
  strategy: {}

  apiKey: "4fac7d10eca54269424d835a2edc15d2"
  adminPassword: adminpass

  auth:
    existingSecret: ""
    secretKeys:
      adminPasswordKey: "admin-password"
      apiKeyKey: "api-key"

  service:
    type: NodePort
    webui:
      port: 7878
      nodePort: 30878
    health:
      port: 9001
      nodePort: 31002
    annotations: {}
    labels: {}

  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: radarr.example.com
        paths:
          - path: /
            pathType: Prefix
    tls: []

  env:
    TZ: UTC
    PUID: "1000"
    PGID: "1000"

  extraEnv: []
  envFrom: []

  podSecurityContext: {}
  securityContext: {}
  podAnnotations: {}
  podLabels: {}

  initContainers: []
  extraContainers: []
  extraVolumes: []
  extraVolumeMounts: []

  livenessProbe: {}
  readinessProbe: {}
  startupProbe: {}
  lifecycle: {}

  nodeSelector: {}
  tolerations: []
  affinity: {}
  priorityClassName: ""

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  # Reconciliation settings
  reconciliation:
    enabled: true
    interval: 30  # seconds
    watch: true

  # Storage configuration
  storage:
    movies:
      enabled: true
      size: 100Gi
      storageClass: ""

  # Configuration as code
  config:
    apiKey: "4fac7d10eca54269424d835a2edc15d2"
    prowlarrSync: true
    rootFolders:
      - path: "/movies"
        accessible: true
    qualityProfiles:
      - name: "HD - 1080p"
        upgradeAllowed: true
        cutoff: 1080
        items:
          - quality:
              id: 1
              name: "Bluray-1080p"
            allowed: true
          - quality:
              id: 2
              name: "WEBDL-1080p"
            allowed: true
    downloadClients:
      - name: "qBittorrent"
        implementation: "QBittorrent"
        implementationName: "qBittorrent"
        configContract: "QBittorrentSettings"
        fields:
          - name: "host"
            value: "qbittorrent"
          - name: "port"
            value: 8080
          - name: "username"
            value: "admin"
          - name: "password"
            value: "adminpass"
          - name: "category"
            value: "movies"
        enable: true
        priority: 1

# Lidarr configuration
lidarr:
  enabled: false
  image:
    repository: linuxserver/lidarr
    tag: latest

  apiKey: "your-lidarr-api-key"
  adminPassword: adminpass

  service:
    type: NodePort
    webui:
      port: 8686
      nodePort: 30686
    health:
      port: 9001
      nodePort: 31004

  env:
    TZ: UTC
    PUID: "1000"
    PGID: "1000"

  resources:
    requests:
      memory: "256Mi"
      cpu: "100m"
    limits:
      memory: "512Mi"
      cpu: "500m"

  reconciliation:
    enabled: true
    interval: 30
    watch: true

  storage:
    music:
      enabled: true
      size: 50Gi
      storageClass: ""

  config:
    apiKey: "your-lidarr-api-key"
    prowlarrSync: true
    rootFolders:
      - path: "/music"
        accessible: true
