name: Helm Chart

on:
  push:
    branches: [main]
    tags: ['v*']
  pull_request:
    branches: [main]
  workflow_run:
    workflows: ["CI"]
    types:
      - completed

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io
  CHART_NAME: preparr

jobs:
  lint-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Lint Helm chart
        run: helm lint ./helm/preparr

      - name: Template Helm chart
        run: |
          helm template test-release ./helm/preparr > /dev/null
          echo "✓ Helm template rendering successful"

      - name: Validate with example values
        run: |
          for values_file in helm/preparr/examples/*.yaml; do
            echo "Testing with $(basename $values_file)..."
            helm template test-release ./helm/preparr -f "$values_file" > /dev/null
          done
          echo "✓ All example values files validated"

  publish:
    needs: lint-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch' || (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success'))
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: v3.14.0

      - name: Get latest version
        id: version
        run: |
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.1.0")
          VERSION=${LATEST_TAG#v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Latest version: $VERSION"

      - name: Update Chart version
        run: |
          sed -i "s/^version:.*/version: ${{ steps.version.outputs.version }}/" helm/preparr/Chart.yaml
          sed -i "s/^appVersion:.*/appVersion: \"${{ steps.version.outputs.version }}\"/" helm/preparr/Chart.yaml
          cat helm/preparr/Chart.yaml
          echo "Updated Chart.yaml to version ${{ steps.version.outputs.version }}"

      - name: Log in to GitHub Container Registry
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ${{ env.REGISTRY }} --username ${{ github.actor }} --password-stdin

      - name: Package Helm chart
        run: |
          helm package helm/preparr
          echo "✓ Helm chart packaged"

      - name: Push to GitHub Container Registry
        run: |
          helm push ${{ env.CHART_NAME }}-${{ steps.version.outputs.version }}.tgz oci://${{ env.REGISTRY }}/${{ github.repository_owner }}
          echo "✓ Helm chart pushed to GHCR"

      - name: Update release notes
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: Release v${{ steps.version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            ## Release v${{ steps.version.outputs.version }}

            ### Helm Chart Installation (OCI Registry)

            ```bash
            # Install directly from GHCR (recommended)
            helm install my-media-stack oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }} --version ${{ steps.version.outputs.version }}

            # Or pull and inspect first
            helm pull oci://${{ env.REGISTRY }}/${{ github.repository_owner }}/${{ env.CHART_NAME }} --version ${{ steps.version.outputs.version }}
            ```

            ### Configuration

            See the [Chart README](https://github.com/${{ github.repository }}/blob/main/helm/preparr/README.md) for all configuration options.

            ### Docker Image

            ```bash
            docker pull ${{ env.REGISTRY }}/${{ github.repository }}:${{ steps.version.outputs.version }}
            ```
